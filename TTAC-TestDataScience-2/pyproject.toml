[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ttac-test-ds-timeseries"
version = "0.1.0"
description = "TEST 2 - Time Series: Air Quality Dataset with ARIMA, LSTM, Prophet forecasting"
authors = ["Tomás Travis Alonso Cremnitz <tomasnataliaalbanes@gmail.com>"]
readme = "README.md"
packages = [{include = "ttac_test_ds_timeseries", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
pandas = "^2.1.0"
numpy = "^1.24.0"
scikit-learn = "^1.3.0"
matplotlib = "^3.7.0"
seaborn = "^0.12.0"
jupyter = "^1.0.0"
joblib = "^1.3.0"
statsmodels = "^0.14.0"
tensorflow = "^2.13.0"
prophet = "^1.1.4"
plotly = "^5.15.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
black = "^23.7.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
isort = "^5.12.0"
pre-commit = "^3.3.0"
bandit = "^1.7.0"
safety = "^2.3.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.1.0"

# Configuración de Black (formateo de código)
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'

# Configuración de isort (organización de imports)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ttac_test_ds_timeseries"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true

# Configuración de MyPy (type checking)
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "joblib.*",
    "statsmodels.*",
    "tensorflow.*",
    "prophet.*",
    "plotly.*",
]
ignore_missing_imports = true

# Configuración de pytest
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Configuración de coverage
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
show_missing = true

# Configuración de flake8 (complejidad ciclomática máx 10 según README)
[tool.flake8]
max-line-length = 88
max-complexity = 10
select = ["E", "W", "F", "C90"]
ignore = ["E203", "E501", "W503"]

# Configuración de ruff como backup
[tool.ruff]
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg", ".mypy_cache",
    ".nox", ".pants.d", ".pytype", ".ruff_cache", ".svn", ".tox", ".venv",
    "__pypackages__", "_build", "buck-out", "build", "dist", "node_modules", "venv",
]
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "N", "UP", "B", "C4", "SIM", "Q"]
ignore = ["E501"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
